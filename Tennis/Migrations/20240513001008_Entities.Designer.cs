// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tennis.Repository;

#nullable disable

namespace Tennis.Migrations
{
    [DbContext(typeof(TennisContext))]
    [Migration("20240513001008_Entities")]
    partial class Entities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tennis.Models.Entity.Match", b =>
                {
                    b.Property<int>("IdPlayer1")
                        .HasMaxLength(4)
                        .HasColumnType("int")
                        .HasColumnName("IdPlayer1");

                    b.Property<int>("IdPlayer2")
                        .HasMaxLength(4)
                        .HasColumnType("int")
                        .HasColumnName("IdPlayer2");

                    b.Property<int>("IdMatch")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("int")
                        .HasColumnName("IdMatch");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMatch"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Date");

                    b.Property<int>("MatchType")
                        .HasMaxLength(1)
                        .HasColumnType("int")
                        .HasColumnName("MatchType");

                    b.Property<int>("TournamentId")
                        .HasMaxLength(4)
                        .HasColumnType("int")
                        .HasColumnName("IdTournament");

                    b.Property<int?>("WinnerId")
                        .HasColumnType("int")
                        .HasColumnName("WinnerId");

                    b.HasKey("IdPlayer1", "IdPlayer2", "IdMatch");

                    b.HasIndex("IdPlayer2");

                    b.HasIndex("TournamentId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Match", (string)null);
                });

            modelBuilder.Entity("Tennis.Models.Entity.Person", b =>
                {
                    b.Property<int>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("int")
                        .HasColumnName("IdPerson");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPerson"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.HasKey("IdPerson");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("Tennis.Models.Entity.Player", b =>
                {
                    b.Property<int>("IdPlayer")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("int")
                        .HasColumnName("IdPlayer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPlayer"));

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.Property<int>("Hand")
                        .HasColumnType("int")
                        .HasColumnName("Hand");

                    b.Property<int>("IdPerson")
                        .HasMaxLength(4)
                        .HasColumnType("int")
                        .HasColumnName("IdPerson");

                    b.Property<int>("ReactionTime")
                        .HasMaxLength(2)
                        .HasColumnType("int")
                        .HasColumnName("ReactionTime");

                    b.Property<int>("Speed")
                        .HasMaxLength(2)
                        .HasColumnType("int")
                        .HasColumnName("Speed");

                    b.Property<int>("Strength")
                        .HasMaxLength(2)
                        .HasColumnType("int")
                        .HasColumnName("Strength");

                    b.HasKey("IdPlayer");

                    b.HasIndex("IdPerson")
                        .IsUnique();

                    b.ToTable("Player", (string)null);
                });

            modelBuilder.Entity("Tennis.Models.Entity.RegisteredPlayer", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasMaxLength(4)
                        .HasColumnType("int")
                        .HasColumnName("PlayerId");

                    b.Property<int>("TournamentId")
                        .HasMaxLength(4)
                        .HasColumnType("int")
                        .HasColumnName("TournamentId");

                    b.HasKey("PlayerId", "TournamentId");

                    b.HasIndex("TournamentId");

                    b.ToTable("RegisteredPlayer", (string)null);
                });

            modelBuilder.Entity("Tennis.Models.Entity.Tournament", b =>
                {
                    b.Property<int>("IdTournament")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("int")
                        .HasColumnName("IdTournament");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTournament"));

                    b.Property<int>("Capacity")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .HasColumnName("Capacity");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("EndDate");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<int>("Prize")
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasColumnName("Prize");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("StartDate");

                    b.Property<int?>("WinnerId")
                        .HasColumnType("int")
                        .HasColumnName("WinnerId");

                    b.HasKey("IdTournament");

                    b.ToTable("Tournament", (string)null);
                });

            modelBuilder.Entity("Tennis.Models.Entity.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("int")
                        .HasColumnName("IdUser");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<int>("IdPerson")
                        .HasMaxLength(4)
                        .HasColumnType("int")
                        .HasColumnName("IdPerson");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Password");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Rol");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Username");

                    b.HasKey("IdUser");

                    b.HasIndex("IdPerson")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Tennis.Models.Entity.Match", b =>
                {
                    b.HasOne("Tennis.Models.Entity.Player", "Player1")
                        .WithMany("MatchesAsP1")
                        .HasForeignKey("IdPlayer1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Match_Player1");

                    b.HasOne("Tennis.Models.Entity.Player", "Player2")
                        .WithMany("MatchesAsP2")
                        .HasForeignKey("IdPlayer2")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Match_Player2");

                    b.HasOne("Tennis.Models.Entity.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tennis.Models.Entity.Player", "PlayerWinner")
                        .WithMany("MatchesWinner")
                        .HasForeignKey("WinnerId")
                        .HasConstraintName("FK_Match_Player");

                    b.Navigation("Player1");

                    b.Navigation("Player2");

                    b.Navigation("PlayerWinner");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Tennis.Models.Entity.Player", b =>
                {
                    b.HasOne("Tennis.Models.Entity.Person", "Person")
                        .WithOne("Player")
                        .HasForeignKey("Tennis.Models.Entity.Player", "IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Tennis.Models.Entity.RegisteredPlayer", b =>
                {
                    b.HasOne("Tennis.Models.Entity.Player", "Player")
                        .WithMany("RegisteredPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tennis.Models.Entity.Tournament", "Tournament")
                        .WithMany("RegisteredPlayers")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Tennis.Models.Entity.User", b =>
                {
                    b.HasOne("Tennis.Models.Entity.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("Tennis.Models.Entity.User", "IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Tennis.Models.Entity.Person", b =>
                {
                    b.Navigation("Player");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tennis.Models.Entity.Player", b =>
                {
                    b.Navigation("MatchesAsP1");

                    b.Navigation("MatchesAsP2");

                    b.Navigation("MatchesWinner");

                    b.Navigation("RegisteredPlayers");
                });

            modelBuilder.Entity("Tennis.Models.Entity.Tournament", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("RegisteredPlayers");
                });
#pragma warning restore 612, 618
        }
    }
}
